[{"path":"https://paleolimbot.github.io/geoarrow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 geoarrow authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D (2022). geoarrow: Extension types geospatial data use 'Arrow'. R package version 0.0.0.9000, https://paleolimbot.github.io/geoarrow/.","code":"@Manual{,   title = {geoarrow: Extension types for geospatial data for use with 'Arrow'},   author = {Dewey Dunnington},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://paleolimbot.github.io/geoarrow/}, }"},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"geoarrow","dir":"","previous_headings":"","what":"Extension types for geospatial data for use with Arrow","title":"Extension types for geospatial data for use with Arrow","text":"goal geoarrow prototype Arrow representations geometry. currently first-draft specification nothing used anything except entertainment value.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extension types for geospatial data for use with Arrow","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"paleolimbot/geoarrow\")"},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"write-and-write-to-parquet","dir":"","previous_headings":"","what":"Write and write to Parquet","title":"Extension types for geospatial data for use with Arrow","text":"exists prototyping , work things throw . Notably, sf objects work ---box. can use schemas experiment passing schema argument. control geometry stored Arrow data type (shouldn’t affect round trip back R).","code":"library(geoarrow)  nc <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\")) write_geoarrow_parquet(nc, \"nc.parquet\") sf::st_as_sf(read_geoarrow_parquet(\"nc.parquet\")) #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> # A tibble: 100 × 15 #>     AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>    <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #>  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10 #>  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10 #>  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208 #>  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123 #>  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066 #>  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954 #>  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115 #>  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254 #>  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748 #> 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160 #> # … with 90 more rows, and 4 more variables: BIR79 <dbl>, SID79 <dbl>, #> #   NWBIR79 <dbl>, geometry <MULTIPOLYGON [°]> write_geoarrow_parquet(nc, \"nc.parquet\", schema = geoarrow_schema_wkb()) sf::st_as_sf(read_geoarrow_parquet(\"nc.parquet\")) #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> CRS:           NA #> # A tibble: 100 × 15 #>     AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>    <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #>  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10 #>  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10 #>  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208 #>  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123 #>  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066 #>  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954 #>  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115 #>  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254 #>  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748 #> 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160 #> # … with 90 more rows, and 4 more variables: BIR79 <dbl>, SID79 <dbl>, #> #   NWBIR79 <dbl>, geometry <MULTIPOLYGON>"},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"type-examples","dir":"","previous_headings":"","what":"Type examples","title":"Extension types for geospatial data for use with Arrow","text":"First, extension types kind encodings existing libraries support already: …also Arrow-native forms don’t need parsed. Collections currently fall back WKB theoretically supported using union type: examples single feature/ring/linestring, fall back using fixed-width list. ability use fixed-width list might important , say, 10 million rectangles 5 points ’s need store 64-bit offset coordinate. cases ’s 2 ^ 31 coordinates, offsets need 64-bit integers (.e., large_list type). can force either cases level nesting specifying schema hand: options point storage. default store coordinates fixed-width list doubles (float64) coordinates stay together memory. probably fastest mirrors way formats (e.g., WKB) store coordinates. Alternatively, can store coordinates struct. much like storing x y values columns might useful already user values memory (e.g., user read table x y values columns). also might faster operations like adding dropping dimensions buffers stay separate dimension. , might adequate store values float32 instead float64. didn’t implement yet theory shouldn’t problem. far exhaustive list coordinates can stored. example, S2 cell IDs (64-bit integers ~1 cm resolution describing location globe) fast compact way encode geographic coordinates. H3 library similar scheme 64-bit integer describes hexagon sphere. libraries use 32-bit integers scaled 1e6 represent longitude latitude, provide exact decimal type skirt around floating point precision issues, particularly internal calculations (e.g., decimal128 decimal256). might worth supporting point storage formats particular implementation; however, format coordinate array can swapped independent rest array structure.","code":"geom_linestring <- wk::wkt(\"LINESTRING (1 2, 2 3)\")  narrow::from_narrow_array(   geoarrow_create(geom_linestring, schema = geoarrow_schema_wkb()),   arrow::Array ) #> Array #> <fixed_size_binary[41]> #> [ #>   010200000002000000000000000000F03F000000000000004000000000000000400000000000000840 #> ]  narrow::from_narrow_array(   geoarrow_create(geom_linestring, schema = geoarrow_schema_wkt()),   arrow::Array ) #> Array #> <string> #> [ #>   \"LINESTRING (1 2, 2 3)\" #> ]  narrow::from_narrow_array(   geoarrow_create(geom_linestring, schema = geoarrow_schema_geojson()),   arrow::Array ) #> Array #> <string> #> [ #>   \"{\"type\":\"LineString\",\"coordinates\":[[1.0,2.0],[2.0,3.0]]}\" #> ] geom_point <- wk::wkt(\"POINT (1 2)\") geom_linestring <- wk::wkt(\"LINESTRING (1 2, 2 3)\") geom_poly <- wk::wkt(\"POLYGON ((0 0, 1 1, 0 1, 0 0))\") geom_multipoint <- wk::wkt(\"MULTIPOINT (1 2)\") geom_multilinestring <- wk::wkt(\"MULTILINESTRING ((1 2, 2 3))\") geom_multipoly <- wk::wkt(\"MULTIPOLYGON (((0 0, 1 1, 0 1, 0 0)))\")  narrow::from_narrow_array(geoarrow_create(geom_point), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: double not null>[2]> #> [ #>   [ #>     1, #>     2 #>   ] #> ] narrow::from_narrow_array(geoarrow_create(geom_linestring), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: fixed_size_list<: double not null>[2] not null>[2]> #> [ #>   [ #>     [ #>       1, #>       2 #>     ], #>     [ #>       2, #>       3 #>     ] #>   ] #> ] narrow::from_narrow_array(geoarrow_create(geom_poly), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: fixed_size_list<: fixed_size_list<: double not null>[2] not null>[4] not null>[1]> #> [ #>   [ #>     [ #>       [ #>         0, #>         0 #>       ], #>       [ #>         1, #>         1 #>       ], #>       [ #>         0, #>         1 #>       ], #>       [ #>         0, #>         0 #>       ] #>     ] #>   ] #> ] narrow::from_narrow_array(geoarrow_create(geom_multipoint), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: fixed_size_list<: double not null>[2] not null>[1]> #> [ #>   [ #>     [ #>       1, #>       2 #>     ] #>   ] #> ] narrow::from_narrow_array(geoarrow_create(geom_multilinestring), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: fixed_size_list<: fixed_size_list<: double not null>[2] not null>[2]>[1]> #> [ #>   [ #>     [ #>       [ #>         1, #>         2 #>       ], #>       [ #>         2, #>         3 #>       ] #>     ] #>   ] #> ] narrow::from_narrow_array(geoarrow_create(geom_multipoly), arrow::Array) #> FixedSizeListArray #> <fixed_size_list<: fixed_size_list<: fixed_size_list<: fixed_size_list<: double not null>[2] not null>[4] not null>[1]>[1]> #> [ #>   [ #>     [ #>       [ #>         [ #>           0, #>           0 #>         ], #>         [ #>           1, #>           1 #>         ], #>         [ #>           0, #>           1 #>         ], #>         [ #>           0, #>           0 #>         ] #>       ] #>     ] #>   ] #> ] geom_collection <- wk::wkt(\"GEOMETRYCOLLECTION (POINT (0 1), LINESTRING (1 1, 2 2))\") narrow::from_narrow_array(geoarrow_create(geom_collection), arrow::Array) #> Array #> <fixed_size_binary[71]> #> [ #>   01070000000200000001010000000000000000000000000000000000F03F010200000002000000000000000000F03F000000000000F03F00000000000000400000000000000040 #> ] narrow::from_narrow_array(   geoarrow_create(     geom_poly,     schema = geoarrow_schema_polygon(format = c(\"+L\", \"+l\")),     strict = TRUE   ),   arrow::Array ) #> LargeListArray #> <large_list<: list<: fixed_size_list<: double not null>[2] not null> not null>> #> [ #>   [ #>     [ #>       [ #>         0, #>         0 #>       ], #>       [ #>         1, #>         1 #>       ], #>       [ #>         0, #>         1 #>       ], #>       [ #>         0, #>         0 #>       ] #>     ] #>   ] #> ] (points <- wk::xy(1:3, 4:6)) #> <wk_xy[3]> #> [1] (1 4) (2 5) (3 6) array <- geoarrow_create(points) as.numeric(array$array_data$children[[1]]$buffers[[2]]) #> [1] 1 4 2 5 3 6 array <- geoarrow_create(points, schema = geoarrow_schema_point_struct()) as.numeric(array$array_data$children[[1]]$buffers[[2]]) #> [1] 1 2 3 as.numeric(array$array_data$children[[2]]$buffers[[2]]) #> [1] 4 5 6"},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"why-so-many-options","dir":"","previous_headings":"","what":"Why so many options?","title":"Extension types for geospatial data for use with Arrow","text":"options provided implementations can experiment see one worth supporting.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/index.html","id":"metadata","dir":"","previous_headings":"","what":"Metadata","title":"Extension types for geospatial data for use with Arrow","text":"schemas use column-level extension types extension metadata encode dimension names, CRS information, flag specify edges considered geodesic rather Cartesian. argue string recognized latest PROJ release CRS valid crs item (lives point array). includes full WKT2 output, provides detail expense including redundant information can get sync. think “OGC:CRS84” “EPSG:32620” less exact perhaps imprecise way don’t yet understand.","code":"schema <- geoarrow_schema_linestring(   geodesic = TRUE,   point = geoarrow_schema_point(crs = \"OGC:CRS84\") ) schema$metadata[[\"ARROW:extension:name\"]] #> [1] \"geoarrow.linestring\" geoarrow_metadata(schema) #> $geodesic #> [1] \"true\" geoarrow_metadata(schema$children[[1]]) #> $crs #> [1] \"OGC:CRS84\" #> #> $dim #> [1] \"xy\""},{"path":"https://paleolimbot.github.io/geoarrow/reference/as_geoarrow_vctr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GeoArrow vectors — as_geoarrow_vctr","title":"Create GeoArrow vectors — as_geoarrow_vctr","text":"Create GeoArrow vectors","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/as_geoarrow_vctr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GeoArrow vectors — as_geoarrow_vctr","text":"","code":"as_geoarrow_vctr(x, ..., schema = geoarrow_schema_default(x), strict = FALSE)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/as_geoarrow_vctr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GeoArrow vectors — as_geoarrow_vctr","text":"x object convert GeoArrow representation. ... Passed wk::wk_handle() schema narrow::narrow_schema() use storage method. strict Use TRUE respect choices storage type, dimensions, CRS provided schema. default, FALSE, updates values match data.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/as_geoarrow_vctr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GeoArrow vectors — as_geoarrow_vctr","text":"object class 'narrow_vctr_geoarrow_EXTENSION' narrow_vctr().","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"geoarrow: Extension types for geospatial data for use with 'Arrow' — geoarrow-package","title":"geoarrow: Extension types for geospatial data for use with 'Arrow' — geoarrow-package","text":"Provides extension types conversions R-native object types 'Arrow' columnar types.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geoarrow: Extension types for geospatial data for use with 'Arrow' — geoarrow-package","text":"Maintainer: Dewey Dunnington dewey@fishandwhistle.net (ORCID)","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GeoArrow Arrays — geoarrow_create","title":"Create GeoArrow Arrays — geoarrow_create","text":"Create GeoArrow Arrays","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GeoArrow Arrays — geoarrow_create","text":"","code":"geoarrow_create(   handleable,   ...,   schema = geoarrow_schema_default(handleable),   strict = FALSE )  # S3 method for default geoarrow_create(   handleable,   ...,   schema = geoarrow_schema_default(handleable),   strict = FALSE )  geoarrow_schema_default(handleable, point = geoarrow_schema_point())"},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GeoArrow Arrays — geoarrow_create","text":"handleable object wk::wk_handle() method ... Passed wk::wk_handle() schema narrow::narrow_schema() use storage method. strict Use TRUE respect choices storage type, dimensions, CRS provided schema. default, FALSE, updates values match data. point point schema use coordinates","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GeoArrow Arrays — geoarrow_create","text":"narrow::narrow_array()","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create GeoArrow Arrays — geoarrow_create","text":"","code":"geoarrow_create(wk::xy(1:5, 1:5)) #> <narrow_array +w:2[5]> #> - schema: #>   <narrow_schema '+w:2' at 0x55a73de092b0> #>   - format: +w:2 #>   - name:  #>   - flags: nullable #>   - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.point\" #>   $ ARROW:extension:metadata: raw [1:17] 01 00 00 00 ... #>   - dictionary: NULL #>   - children[1]: #>     <narrow_schema 'g' at 0x55a73d150b10> #>     - format: g #>     - name:  #>     - flags: nullable #>     - metadata:  list() #>     - dictionary: NULL #>     - children[0]: #> - array_data: #>   <narrow_array_data at 0x55a73d820fb0> #>   - length: 5 #>   - null_count: 0 #>   - offset: 0 #>   - buffers[1]: List of 1 #>     $ : NULL #>   - dictionary: NULL #>   - children[1]: #>     <narrow_array_data at 0x55a73dd1a0a0> #>     - length: 10 #>     - null_count: 0 #>     - offset: 0 #>     - buffers[2]: List of 2 #>       $ : NULL #>       $ : num [1:2, 1:5] 1 1 2 2 3 3 4 4 5 5 #>     - dictionary: NULL #>     - children[0]:"},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Arrow extension type  metadata — geoarrow_metadata","title":"Extract Arrow extension type  metadata — geoarrow_metadata","text":"Extract Arrow extension type  metadata","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Arrow extension type  metadata — geoarrow_metadata","text":"","code":"geoarrow_metadata(schema)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Arrow extension type  metadata — geoarrow_metadata","text":"schema narrow_schema()","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Arrow extension type  metadata — geoarrow_metadata","text":"list()","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Arrow extension type  metadata — geoarrow_metadata","text":"","code":"geoarrow_metadata(geoarrow_schema_point(crs = \"OGC:CRS84\")) #> $crs #> [1] \"OGC:CRS84\" #>  #> $dim #> [1] \"xy\" #>"},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_schema_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Create low-level Arrow schemas — geoarrow_schema_point","title":"Create low-level Arrow schemas — geoarrow_schema_point","text":"schemas used basis column types Apache Arrow","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_schema_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create low-level Arrow schemas — geoarrow_schema_point","text":"","code":"geoarrow_schema_point(name = \"\", dim = \"xy\", crs = NULL, format_coord = \"g\")  geoarrow_schema_point_struct(   name = \"\",   dim = \"xy\",   crs = NULL,   format_coord = \"g\" )  geoarrow_schema_linestring(   name = \"\",   geodesic = FALSE,   point = geoarrow_schema_point() )  geoarrow_schema_polygon(   name = \"\",   geodesic = FALSE,   point = geoarrow_schema_point() )  geoarrow_schema_multi(child, name = \"\")  geoarrow_schema_wkb(name = \"\", format = \"z\", crs = NULL, geodesic = FALSE)  geoarrow_schema_wkt(name = \"\", format = \"u\", crs = NULL, geodesic = FALSE)  geoarrow_schema_geojson(name = \"\", format = \"u\", crs = NULL)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_schema_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create low-level Arrow schemas — geoarrow_schema_point","text":"name optional name dim string one character per dimension. string must one xy, xyz, xym, xyzm. crs length-one character representation CRS. WKT2 representation recommended complete way encode information; however, string can recognized PROJ command-line utility (e.g., \"OGC:CRS84\"). format_coord format floating point coordinate storage. can \"f\" (float/float32) \"g\" (double/float64). geodesic Use TRUE assert edges interpolated using shortest geodesic path (great circle sphere). point point schema use coordinates child child schema use single-type (multi) collection format custom storage format","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_schema_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create low-level Arrow schemas — geoarrow_schema_point","text":"narrow_schema().","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/geoarrow_schema_point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create low-level Arrow schemas — geoarrow_schema_point","text":"","code":"geoarrow_schema_point() #> <narrow_schema '+w:2' at 0x55a73d9c97d0> #> - format: +w:2 #> - name:  #> - flags: nullable #> - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.point\" #>   $ ARROW:extension:metadata: raw [1:17] 01 00 00 00 ... #> - dictionary: NULL #> - children[1]: #>   <narrow_schema 'g' at 0x55a73d5354b0> #>   - format: g #>   - name:  #>   - flags: nullable #>   - metadata:  list() #>   - dictionary: NULL #>   - children[0]: geoarrow_schema_linestring() #> <narrow_schema '+l' at 0x55a73c5af760> #> - format: +l #> - name:  #> - flags: nullable #> - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.linestring\" #>   $ ARROW:extension:metadata: raw [1:4] 00 00 00 00 #> - dictionary: NULL #> - children[1]: #>   <narrow_schema '+w:2' at 0x55a73d61b4f0> #>   - format: +w:2 #>   - name:  #>   - flags: nullable #>   - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.point\" #>   $ ARROW:extension:metadata: raw [1:17] 01 00 00 00 ... #>   - dictionary: NULL #>   - children[1]: #>     <narrow_schema 'g' at 0x55a73a7a3b30> #>     - format: g #>     - name:  #>     - flags: nullable #>     - metadata:  list() #>     - dictionary: NULL #>     - children[0]: geoarrow_schema_polygon() #> <narrow_schema '+l' at 0x55a73ba7d350> #> - format: +l #> - name:  #> - flags: nullable #> - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.polygon\" #>   $ ARROW:extension:metadata: raw [1:4] 00 00 00 00 #> - dictionary: NULL #> - children[1]: #>   <narrow_schema '+l' at 0x55a73c0d6b80> #>   - format: +l #>   - name:  #>   - flags: nullable #>   - metadata:  list() #>   - dictionary: NULL #>   - children[1]: #>     <narrow_schema '+w:2' at 0x55a73d6b2c20> #>     - format: +w:2 #>     - name:  #>     - flags: nullable #>     - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.point\" #>   $ ARROW:extension:metadata: raw [1:17] 01 00 00 00 ... #>     - dictionary: NULL #>     - children[1]: #>       <narrow_schema 'g' at 0x55a73d2b2a30> #>       - format: g #>       - name:  #>       - flags: nullable #>       - metadata:  list() #>       - dictionary: NULL #>       - children[0]: geoarrow_schema_multi(geoarrow_schema_point()) #> <narrow_schema '+l' at 0x55a73a51c5d0> #> - format: +l #> - name:  #> - flags: nullable #> - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.multi\" #>   $ ARROW:extension:metadata: raw [1:4] 00 00 00 00 #> - dictionary: NULL #> - children[1]: #>   <narrow_schema '+w:2' at 0x55a73d96f280> #>   - format: +w:2 #>   - name:  #>   - flags: nullable #>   - metadata: List of 2 #>   $ ARROW:extension:name    : chr \"geoarrow.point\" #>   $ ARROW:extension:metadata: raw [1:17] 01 00 00 00 ... #>   - dictionary: NULL #>   - children[1]: #>     <narrow_schema 'g' at 0x55a73d5e4be0> #>     - format: g #>     - name:  #>     - flags: nullable #>     - metadata:  list() #>     - dictionary: NULL #>     - children[0]:"},{"path":"https://paleolimbot.github.io/geoarrow/reference/read_geoarrow_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read geometry from Apache Parquet files — read_geoarrow_parquet","title":"Read geometry from Apache Parquet files — read_geoarrow_parquet","text":"Read geometry Apache Parquet files","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/read_geoarrow_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read geometry from Apache Parquet files — read_geoarrow_parquet","text":"","code":"read_geoarrow_parquet(   file,   ...,   as_data_frame = TRUE,   handler = NULL,   metadata = NULL )  geoarrow_collect(x, ..., handler = NULL, metadata = NULL)  # S3 method for Table geoarrow_collect(x, ..., handler = NULL, metadata = NULL)  # S3 method for RecordBatch geoarrow_collect(x, ..., handler = NULL, metadata = NULL)  # S3 method for RecordBatchReader geoarrow_collect(x, trans = identity, ..., handler = NULL, metadata = NULL)  # S3 method for Dataset geoarrow_collect(x, trans = identity, ..., handler = NULL, metadata = NULL)  # S3 method for arrow_dplyr_query geoarrow_collect(x, ..., handler = NULL, metadata = NULL)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/read_geoarrow_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read geometry from Apache Parquet files — read_geoarrow_parquet","text":"file file InputStream read; passed arrow::read_parquet(). ... Arguments passed arrow::write_parquet sink string file path, URI, OutputStream, path file system (SubTreeFileSystem) chunk_size many rows data write disk . directly corresponds many rows row group parquet. NULL, best guess made optimal size (based number columns number rows), though data fewer 250 million cells (rows x cols), total number rows used. version parquet version, \"1.0\" \"2.0\". Default \"1.0\". Numeric values coerced character. compression compression algorithm. Default \"snappy\". See details. compression_level compression level. Meaning depends compression algorithm use_dictionary Specify use dictionary encoding. Default TRUE write_statistics Specify write statistics. Default TRUE data_page_size Set target threshold approximate encoded size data pages within column chunk (bytes). Default 1 MiB. use_deprecated_int96_timestamps Write timestamps INT96 Parquet format. Default FALSE. coerce_timestamps Cast timestamps particular resolution. Can NULL, \"ms\" \"us\". Default NULL (casting) allow_truncated_timestamps Allow loss data coercing timestamps particular resolution. E.g. microsecond nanosecond data lost coercing \"ms\", raise exception properties ParquetWriterProperties object, used instead options enumerated function's signature. Providing properties argument deprecated; need assemble ParquetWriterProperties outside write_parquet(), use ParquetFileWriter instead. arrow_properties ParquetArrowWriterProperties object. Like properties, argument deprecated. as_data_frame Use FALSE return arrow::Table instead data.frame. handler wk handler use .data.frame TRUE geometry columns. metadata Optional metadata include override metadata available file. x object collect data.frame, converting geometry columns according handler. trans function applied chunk collected data frame.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/read_geoarrow_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read geometry from Apache Parquet files — read_geoarrow_parquet","text":"result arrow::read_parquet(), geometry columns processed according handler.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/wk_handle.narrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Arrow arrays — wk_handle.narrow_array","title":"Handle Arrow arrays — wk_handle.narrow_array","text":"Handle Arrow arrays","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/wk_handle.narrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Arrow arrays — wk_handle.narrow_array","text":"","code":"# S3 method for narrow_array wk_handle(handleable, handler, ...)  # S3 method for narrow_array_stream wk_handle(   handleable,   handler,   ...,   geoarrow_schema = narrow::narrow_array_stream_get_schema(handleable),   geoarrow_n_features = NA_integer_ )  # S3 method for narrow_vctr_geoarrow wk_handle(handleable, handler, ...)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/wk_handle.narrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Arrow arrays — wk_handle.narrow_array","text":"handleable geometry vector (e.g., wkb(), wkt(), xy(), rct(), sf::st_sfc()) wk_handle() defined. handler wk_handler object. ... Passed wk_handle() method. geoarrow_schema Override schema array stream (e.g., provide geo metadata). geoarrow_n_features Manually specify number features reading stream value known (NA_integer ).","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/wk_handle.narrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Arrow arrays — wk_handle.narrow_array","text":"result handler","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/write_geoarrow_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Write geometry as Apache Parquet files — write_geoarrow_parquet","title":"Write geometry as Apache Parquet files — write_geoarrow_parquet","text":"Write geometry Apache Parquet files","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/write_geoarrow_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write geometry as Apache Parquet files — write_geoarrow_parquet","text":"","code":"write_geoarrow_parquet(handleable, ..., schema = NULL, strict = FALSE)"},{"path":"https://paleolimbot.github.io/geoarrow/reference/write_geoarrow_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write geometry as Apache Parquet files — write_geoarrow_parquet","text":"handleable object wk::wk_handle() method ... Arguments passed arrow::write_parquet x data.frame, RecordBatch, Table sink string file path, URI, OutputStream, path file system (SubTreeFileSystem) chunk_size many rows data write disk . directly corresponds many rows row group parquet. NULL, best guess made optimal size (based number columns number rows), though data fewer 250 million cells (rows x cols), total number rows used. version parquet version, \"1.0\" \"2.0\". Default \"1.0\". Numeric values coerced character. compression compression algorithm. Default \"snappy\". See details. compression_level compression level. Meaning depends compression algorithm use_dictionary Specify use dictionary encoding. Default TRUE write_statistics Specify write statistics. Default TRUE data_page_size Set target threshold approximate encoded size data pages within column chunk (bytes). Default 1 MiB. use_deprecated_int96_timestamps Write timestamps INT96 Parquet format. Default FALSE. coerce_timestamps Cast timestamps particular resolution. Can NULL, \"ms\" \"us\". Default NULL (casting) allow_truncated_timestamps Allow loss data coercing timestamps particular resolution. E.g. microsecond nanosecond data lost coercing \"ms\", raise exception properties ParquetWriterProperties object, used instead options enumerated function's signature. Providing properties argument deprecated; need assemble ParquetWriterProperties outside write_parquet(), use ParquetFileWriter instead. arrow_properties ParquetArrowWriterProperties object. Like properties, argument deprecated. schema narrow::narrow_schema() use storage method. strict Use TRUE respect choices storage type, dimensions, CRS provided schema. default, FALSE, updates values match data.","code":""},{"path":"https://paleolimbot.github.io/geoarrow/reference/write_geoarrow_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write geometry as Apache Parquet files — write_geoarrow_parquet","text":"result arrow::write_parquet(), invisibly","code":""}]
