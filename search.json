[{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://geoarrow.org/geoarrow-r/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://geoarrow.org/geoarrow-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dewey Dunnington. Author, maintainer. Anthony North. Contributor. Apache Software Foundation. Copyright holder. Ulf Adams. Copyright holder. Daniel Lemire. Copyright holder. Joao Paulo Magalhaes. Copyright holder.","code":""},{"path":"https://geoarrow.org/geoarrow-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dunnington D (2025). geoarrow: Extension Types Spatial Data Use 'Arrow'. R package version 0.4.0, https://geoarrow.org/geoarrow-r/.","code":"@Manual{,   title = {geoarrow: Extension Types for Spatial Data for Use with 'Arrow'},   author = {Dewey Dunnington},   year = {2025},   note = {R package version 0.4.0},   url = {https://geoarrow.org/geoarrow-r/}, }"},{"path":"https://geoarrow.org/geoarrow-r/index.html","id":"geoarrow","dir":"","previous_headings":"","what":"Extension Types for Spatial Data for Use with Arrow","title":"Extension Types for Spatial Data for Use with Arrow","text":"goal geoarrow leverage features arrow package larger Apache Arrow ecosystem geospatial data. geoarrow package provides R implementation GeoParquet file format draft geoarrow data specification, defining extension array types vector geospatial data.","code":""},{"path":"https://geoarrow.org/geoarrow-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extension Types for Spatial Data for Use with Arrow","text":"can install released version geoarrow CRAN : can install development version geoarrow GitHub :","code":"install.packages(\"geoarrow\") # install.packages(\"pak\") pak::pak(\"geoarrow/geoarrow-r\")"},{"path":"https://geoarrow.org/geoarrow-r/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extension Types for Spatial Data for Use with Arrow","text":"geoarrow package implements conversions /various geospatial types (e.g., sf, sfc, s2, wk) various Arrow representations (e.g., arrow, nanoarrow). useful conversions arrow sf packages, cases allow sf objects passed arrow functions directly library(geoarrow) requireNamespace(\"geoarrow\") called. default, arrow objects converted neutral wrapper around chunked Arrow memory, turn implements conversions spatial types: entry point creating arrays as_geoarrow_vctr(): default attempt create new storage type; however, can request storage type infer one data: number files use examples https://geoarrow.org/data can read nanoarrow::read_nanoarrow():","code":"library(geoarrow) library(arrow, warn.conflicts = FALSE) library(sf) #> Linking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE  nc <- read_sf(system.file(\"gpkg/nc.gpkg\", package = \"sf\")) tf <- tempfile(fileext = \".parquet\")  nc |>    tibble::as_tibble() |>    write_parquet(tf)  open_dataset(tf) |>    dplyr::filter(startsWith(NAME, \"A\")) |>   dplyr::select(NAME, geom) |>    st_as_sf() #> Simple feature collection with 6 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -82.07776 ymin: 34.80792 xmax: -79.23799 ymax: 36.58965 #> Geodetic CRS:  NAD27 #>        NAME                           geom #> 1      Ashe MULTIPOLYGON (((-81.47276 3... #> 2 Alleghany MULTIPOLYGON (((-81.23989 3... #> 3     Avery MULTIPOLYGON (((-81.94135 3... #> 4  Alamance MULTIPOLYGON (((-79.24619 3... #> 5 Alexander MULTIPOLYGON (((-81.10889 3... #> 6     Anson MULTIPOLYGON (((-79.91995 3... df <- read_parquet(tf) df$geom #> <geoarrow_vctr geoarrow.multipolygon{list}[100]> #>  [1] <MULTIPOLYGON (((-81.4727554 36.2343559, -81.5408401 36.2725067, -81.56> #>  [2] <MULTIPOLYGON (((-81.2398911 36.3653641, -81.2406921 36.3794174, -81.26> #>  [3] <MULTIPOLYGON (((-80.4563446 36.2425575, -80.476387 36.2547264, -80.536> #>  [4] <MULTIPOLYGON (((-76.0089722 36.3195953, -76.0173492 36.3377304, -76.03> #>  [5] <MULTIPOLYGON (((-77.2176666 36.2409821, -77.2346115 36.2145996, -77.29> #>  [6] <MULTIPOLYGON (((-76.7450638 36.2339172, -76.98069 36.2302361, -76.9947> #>  [7] <MULTIPOLYGON (((-76.0089722 36.3195953, -75.9571838 36.1937714, -75.98> #>  [8] <MULTIPOLYGON (((-76.5625076 36.3405685, -76.6042404 36.3149834, -76.64> #>  [9] <MULTIPOLYGON (((-78.3087616 36.2600403, -78.2829285 36.2918816, -78.32> #> [10] <MULTIPOLYGON (((-80.0256729 36.2502327, -80.4530106 36.2570877, -80.43> #> [11] <MULTIPOLYGON (((-79.5305099 36.2461357, -79.5102997 36.547657, -79.217> #> [12] <MULTIPOLYGON (((-79.5305099 36.2461357, -79.5305786 36.2361565, -80.02> #> [13] <MULTIPOLYGON (((-78.7491226 36.063591, -78.788414 36.0621834, -78.8040> #> [14] <MULTIPOLYGON (((-78.8068008 36.231575, -78.9510803 36.2338371, -79.159> #> [15] <MULTIPOLYGON (((-78.4925232 36.1735878, -78.5147171 36.1752243, -78.51> #> [16] <MULTIPOLYGON (((-77.3322067 36.0679817, -77.4053116 35.9947166, -77.42> #> [17] <MULTIPOLYGON (((-76.2989273 36.2142296, -76.324234 36.2336235, -76.372> #> [18] <MULTIPOLYGON (((-81.0205688 36.034935, -81.0840836 36.0207672, -81.124> #> [19] <MULTIPOLYGON (((-81.806221 36.1045609, -81.8171539 36.1093864, -81.822> #> [20] <MULTIPOLYGON (((-76.4805298 36.079792, -76.5369568 36.087925, -76.5755> #> ...and 80 more values st_as_sfc(df$geom) #> Geometry set for 100 features  #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> First 5 geometries: #> MULTIPOLYGON (((-81.47276 36.23436, -81.54084 3... #> MULTIPOLYGON (((-81.23989 36.36536, -81.24069 3... #> MULTIPOLYGON (((-80.45634 36.24256, -80.47639 3... #> MULTIPOLYGON (((-76.00897 36.3196, -76.01735 36... #> MULTIPOLYGON (((-77.21767 36.24098, -77.23461 3... as_geoarrow_vctr(c(\"POINT (0 1)\", \"POINT (2 3)\")) #> <geoarrow_vctr geoarrow.wkt{string}[2]> #> [1] <POINT (0 1)> <POINT (2 3)> as_geoarrow_vctr(c(\"POINT (0 1)\", \"POINT (2 3)\"), schema = geoarrow_native(\"POINT\")) #> <geoarrow_vctr geoarrow.point{struct}[2]> #> [1] <POINT (0 1)> <POINT (2 3)>  vctr <- as_geoarrow_vctr(c(\"POINT (0 1)\", \"POINT (2 3)\")) as_geoarrow_vctr(vctr, schema = infer_geoarrow_schema(vctr)) #> <geoarrow_vctr geoarrow.point{struct}[2]> #> [1] <POINT (0 1)> <POINT (2 3)> url <- \"https://raw.githubusercontent.com/geoarrow/geoarrow-data/v0.2.0/natural-earth/files/natural-earth_cities.arrows\" nanoarrow::read_nanoarrow(url) |>    as.data.frame() |>    head(5) #>           name                         geometry #> 1 Vatican City  <POINT (12.4533865 41.9032822)> #> 2   San Marino  <POINT (12.4417702 43.9360958)> #> 3        Vaduz   <POINT (9.5166695 47.1337238)> #> 4      Lobamba <POINT (31.1999971 -26.4666675)> #> 5   Luxembourg   <POINT (6.1300028 49.6116604)>"},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a GeoArrow array — as_geoarrow_array","title":"Convert an object to a GeoArrow array — as_geoarrow_array","text":"Convert object GeoArrow array","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a GeoArrow array — as_geoarrow_array","text":"","code":"as_geoarrow_array(x, ..., schema = NULL)  as_geoarrow_array_stream(x, ..., schema = NULL)"},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a GeoArrow array — as_geoarrow_array","text":"x object ... Passed S3 methods schema geoarrow extension schema use target type","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an object to a GeoArrow array — as_geoarrow_array","text":"nanoarrow_array.","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an object to a GeoArrow array — as_geoarrow_array","text":"","code":"as_geoarrow_array(wk::wkt(\"POINT (0 1)\")) #> <nanoarrow_array geoarrow.wkt{string}[1]> #>  $ length    : int 1 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 3 #>   ..$ :<nanoarrow_buffer validity<bool>[null] `` #>   ..$ :<nanoarrow_buffer data_offset<int32>[2][8 b]> `0 11` #>   ..$ :<nanoarrow_buffer data<string>[11 b]> `POINT (0 1)` #>  $ dictionary: NULL #>  $ children  : list()"},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_vctr.html","id":null,"dir":"Reference","previous_headings":"","what":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","title":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","text":"GeoArrow encoded arrays R vectors","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_vctr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","text":"","code":"as_geoarrow_vctr(x, ..., schema = NULL)"},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_vctr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","text":"x object works as_geoarrow_array_stream(). spatial objects R already work method. ... Passed as_geoarrow_array_stream() schema optional schema (e.g., na_extension_geoarrow()).","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_vctr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","text":"vctr class 'geoarrow_vctr'","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/as_geoarrow_vctr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeoArrow encoded arrays as R vectors — as_geoarrow_vctr","text":"","code":"as_geoarrow_vctr(\"POINT (0 1)\") #> <geoarrow_vctr geoarrow.wkt{string}[1]> #> [1] <POINT (0 1)>"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"geoarrow: Extension Types for Spatial Data for Use with 'Arrow' — geoarrow-package","title":"geoarrow: Extension Types for Spatial Data for Use with 'Arrow' — geoarrow-package","text":"Provides extension types conversions R-native object types 'Arrow' columnar types. includes integration among 'arrow', 'nanoarrow', 'sf', 'wk' packages spatial metadata preserved wherever possible. Extension type implementations ensure first-class geometry data type support 'arrow' 'nanoarrow' packages.","code":""},{"path":[]},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geoarrow: Extension Types for Spatial Data for Use with 'Arrow' — geoarrow-package","text":"Maintainer: Dewey Dunnington dewey@dunnington.ca (ORCID) contributors: Anthony North anthony.jl.north@gmail.com [contributor] Apache Software Foundation dev@arrow.apache.org [copyright holder] Ulf Adams [copyright holder] Daniel Lemire [copyright holder] Joao Paulo Magalhaes [copyright holder]","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","title":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","text":"Handler/writer interface GeoArrow arrays","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","text":"","code":"geoarrow_handle(x, handler, size = NA_integer_)  geoarrow_writer(schema)"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","text":"x object implementing as_geoarrow_array_stream() handler wk handler size number elements stream NA unknown schema nanoarrow_schema","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_handle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","text":"geoarrow_handle(): Returns result handler geoarrow_writer(): Returns nanoarrow array","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handler/writer interface for GeoArrow arrays — geoarrow_handle","text":"","code":"geoarrow_handle(wk::xy(1:3, 2:4), wk::wk_debug_filter()) #> initialize (dirty = 0  -> 1) #> vector_start: POINT[UNKNOWN] <0x5622351d6aa0> => WK_CONTINUE #>   feature_start (1): <0x5622351d6aa0>  => WK_CONTINUE #>     geometry_start (<none>): POINT[UNKNOWN] <0x562236c25be0> => WK_CONTINUE #>       coord (1): <0x562236c25be0> (1.000000 2.000000)  => WK_CONTINUE #>     geometry_end (<none>)  => WK_CONTINUE #>   feature_end (1): <0x5622351d6aa0>  => WK_CONTINUE #>   feature_start (2): <0x5622351d6aa0>  => WK_CONTINUE #>     geometry_start (<none>): POINT[UNKNOWN] <0x562236c25be0> => WK_CONTINUE #>       coord (1): <0x562236c25be0> (2.000000 3.000000)  => WK_CONTINUE #>     geometry_end (<none>)  => WK_CONTINUE #>   feature_end (2): <0x5622351d6aa0>  => WK_CONTINUE #>   feature_start (3): <0x5622351d6aa0>  => WK_CONTINUE #>     geometry_start (<none>): POINT[UNKNOWN] <0x562236c25be0> => WK_CONTINUE #>       coord (1): <0x562236c25be0> (3.000000 4.000000)  => WK_CONTINUE #>     geometry_end (<none>)  => WK_CONTINUE #>   feature_end (3): <0x5622351d6aa0>  => WK_CONTINUE #> vector_end: <0x5622351d6aa0> #> deinitialize #> NULL wk::wk_handle(wk::xy(1:3, 2:4), geoarrow_writer(na_extension_wkt())) #> <nanoarrow_array geoarrow.wkt{string}[3]> #>  $ length    : int 3 #>  $ null_count: int 0 #>  $ offset    : int 0 #>  $ buffers   :List of 3 #>   ..$ :<nanoarrow_buffer validity<bool>[null] `` #>   ..$ :<nanoarrow_buffer data_offset<int32>[4][16 b]> `0 11 22 33` #>   ..$ :<nanoarrow_buffer data<string>[33 b]> `POINT (1 2)POINT (2 3)POINT (3 4)` #>  $ dictionary: NULL #>  $ children  : list()"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_schema_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect a GeoArrow schema — geoarrow_schema_parse","title":"Inspect a GeoArrow schema — geoarrow_schema_parse","text":"Inspect GeoArrow schema","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_schema_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect a GeoArrow schema — geoarrow_schema_parse","text":"","code":"geoarrow_schema_parse(   schema,   extension_name = NULL,   infer_from_storage = FALSE )  is_geoarrow_schema(schema)  as_geoarrow_schema(schema)"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_schema_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect a GeoArrow schema — geoarrow_schema_parse","text":"schema nanoarrow_schema extension_name extension name use schema storage type. infer_from_storage Attempt guess extension name schema geoarrow extension type.","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_schema_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect a GeoArrow schema — geoarrow_schema_parse","text":"list parsed properties","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_schema_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect a GeoArrow schema — geoarrow_schema_parse","text":"","code":"geoarrow_schema_parse(na_extension_geoarrow(\"POINT\")) #> $id #> [1] 1 #>  #> $geometry_type #> [1] 1 #>  #> $dimensions #> [1] 1 #>  #> $coord_type #> [1] 1 #>  #> $extension_name #> [1] \"geoarrow.point\" #>  #> $crs_type #> [1] 0 #>  #> $crs #> [1] \"\" #>  #> $edge_type #> [1] 0 #>"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_wkb.html","id":null,"dir":"Reference","previous_headings":"","what":"GeoArrow Types — geoarrow_wkb","title":"GeoArrow Types — geoarrow_wkb","text":"functions provide GeoArrow type definitions zero-length vectors.","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_wkb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeoArrow Types — geoarrow_wkb","text":"","code":"geoarrow_wkb(crs = NULL, edges = \"PLANAR\")  geoarrow_wkt(crs = NULL, edges = \"PLANAR\")  geoarrow_large_wkb(crs = NULL, edges = \"PLANAR\")  geoarrow_large_wkt(crs = NULL, edges = \"PLANAR\")  geoarrow_wkb_view(crs = NULL, edges = \"PLANAR\")  geoarrow_wkt_view(crs = NULL, edges = \"PLANAR\")  geoarrow_native(   geometry_type,   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_point(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_linestring(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_polygon(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_multipoint(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_multilinestring(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_multipolygon(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )  geoarrow_box(   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )"},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_wkb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeoArrow Types — geoarrow_wkb","text":"crs object representing CRS. maximum portability, implement wk::wk_crs_projjson(). edges One \"PLANAR\" \"SPHERICAL\". geometry_type One \"POINT\", \"LINESTRING\", \"POLYGON\", \"MULTIPOINT\", \"MULTILINESTRING\", \"MULTIPOLYGON\". dimensions One \"XY\", \"XYZ\", \"XYM\", \"XYZM\" coord_type One \"SEPARATE\" \"INTERLEAVED\"","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_wkb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeoArrow Types — geoarrow_wkb","text":"geoarrow_vctr","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/geoarrow_wkb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GeoArrow Types — geoarrow_wkb","text":"","code":"geoarrow_wkb() #> <geoarrow_vctr geoarrow.wkb{binary}[0]> #> character(0) geoarrow_wkt() #> <geoarrow_vctr geoarrow.wkt{string}[0]> #> character(0) geoarrow_point() #> <geoarrow_vctr geoarrow.point{struct}[0]> #> character(0)"},{"path":"https://geoarrow.org/geoarrow-r/reference/infer_geoarrow_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","title":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","text":"Infer GeoArrow-native type vector","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/infer_geoarrow_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","text":"","code":"infer_geoarrow_schema(x, ..., promote_multi = TRUE, coord_type = NULL)"},{"path":"https://geoarrow.org/geoarrow-r/reference/infer_geoarrow_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","text":"x object infer schema. ... Passed S3 methods. promote_multi Use TRUE return MULTI type normal MULTI elements array. coord_type Specify coordinate type use returning","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/infer_geoarrow_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","text":"nanoarrow_schema","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/infer_geoarrow_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer a GeoArrow-native type from a vector — infer_geoarrow_schema","text":"","code":"infer_geoarrow_schema(wk::wkt(\"POINT (0 1)\")) #> <nanoarrow_schema geoarrow.point{struct}> #>  $ format    : chr \"+s\" #>  $ name      : NULL #>  $ metadata  :List of 2 #>   ..$ ARROW:extension:name    : chr \"geoarrow.point\" #>   ..$ ARROW:extension:metadata: chr \"{}\" #>  $ flags     : int 2 #>  $ children  :List of 2 #>   ..$ x:<nanoarrow_schema double> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"x\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 0 #>   .. ..$ children  : list() #>   .. ..$ dictionary: NULL #>   ..$ y:<nanoarrow_schema double> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"y\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 0 #>   .. ..$ children  : list() #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL"},{"path":"https://geoarrow.org/geoarrow-r/reference/na_extension_wkb.html","id":null,"dir":"Reference","previous_headings":"","what":"Extension type definitions for GeoArrow extension types — na_extension_wkb","title":"Extension type definitions for GeoArrow extension types — na_extension_wkb","text":"Extension type definitions GeoArrow extension types","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/na_extension_wkb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extension type definitions for GeoArrow extension types — na_extension_wkb","text":"","code":"na_extension_wkb(crs = NULL, edges = \"PLANAR\")  na_extension_wkt(crs = NULL, edges = \"PLANAR\")  na_extension_large_wkb(crs = NULL, edges = \"PLANAR\")  na_extension_large_wkt(crs = NULL, edges = \"PLANAR\")  na_extension_wkb_view(crs = NULL, edges = \"PLANAR\")  na_extension_wkt_view(crs = NULL, edges = \"PLANAR\")  na_extension_geoarrow(   geometry_type,   dimensions = \"XY\",   coord_type = \"SEPARATE\",   crs = NULL,   edges = \"PLANAR\" )"},{"path":"https://geoarrow.org/geoarrow-r/reference/na_extension_wkb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extension type definitions for GeoArrow extension types — na_extension_wkb","text":"crs object representing CRS. maximum portability, implement wk::wk_crs_projjson(). edges One \"PLANAR\" \"SPHERICAL\". geometry_type One \"POINT\", \"LINESTRING\", \"POLYGON\", \"MULTIPOINT\", \"MULTILINESTRING\", \"MULTIPOLYGON\". dimensions One \"XY\", \"XYZ\", \"XYM\", \"XYZM\" coord_type One \"SEPARATE\" \"INTERLEAVED\"","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/na_extension_wkb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extension type definitions for GeoArrow extension types — na_extension_wkb","text":"nanoarrow_schema.","code":""},{"path":"https://geoarrow.org/geoarrow-r/reference/na_extension_wkb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extension type definitions for GeoArrow extension types — na_extension_wkb","text":"","code":"na_extension_wkb(crs = \"OGC:CRS84\") #> <nanoarrow_schema geoarrow.wkb{binary}> #>  $ format    : chr \"z\" #>  $ name      : NULL #>  $ metadata  :List of 2 #>   ..$ ARROW:extension:name    : chr \"geoarrow.wkb\" #>   ..$ ARROW:extension:metadata: chr \"{\\\"crs\\\":{\\\"$schema\\\":\\\"https://proj.org/schemas/v0.7/projjson.schema.json\\\",\\\"type\\\":\\\"GeographicCRS\\\",\\\"name\\\"| __truncated__ #>  $ flags     : int 2 #>  $ children  : list() #>  $ dictionary: NULL na_extension_geoarrow(\"POINT\") #> <nanoarrow_schema geoarrow.point{struct}> #>  $ format    : chr \"+s\" #>  $ name      : NULL #>  $ metadata  :List of 2 #>   ..$ ARROW:extension:name    : chr \"geoarrow.point\" #>   ..$ ARROW:extension:metadata: chr \"{}\" #>  $ flags     : int 2 #>  $ children  :List of 2 #>   ..$ x:<nanoarrow_schema double> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"x\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 0 #>   .. ..$ children  : list() #>   .. ..$ dictionary: NULL #>   ..$ y:<nanoarrow_schema double> #>   .. ..$ format    : chr \"g\" #>   .. ..$ name      : chr \"y\" #>   .. ..$ metadata  : list() #>   .. ..$ flags     : int 0 #>   .. ..$ children  : list() #>   .. ..$ dictionary: NULL #>  $ dictionary: NULL"},{"path":"https://geoarrow.org/geoarrow-r/news/index.html","id":"geoarrow-040","dir":"Changelog","previous_headings":"","what":"geoarrow 0.4.0","title":"geoarrow 0.4.0","text":"converting sf objects geoarrow, optional geometry vctr type can now specified (e.g., force geoarrow.wkb output) (#71). internal vendored copies geoarrow-c nanoarrow updated (#72).","code":""},{"path":"https://geoarrow.org/geoarrow-r/news/index.html","id":"geoarrow-030","dir":"Changelog","previous_headings":"","what":"geoarrow 0.3.0","title":"geoarrow 0.3.0","text":"CRAN release: 2025-05-26 Add support geoarrow.box type conversions wk::rct() (#59). Implement wk::wk_set_crs() wk::wk_set_geodesic() geoarrow_vctr class (#61). Fix conversion empty sf::st_crs() GeoArrow CRS (#60). geoarrow_vctr can now rearranged subset non-slice range arrow package installed (#62). R package now supports extra metadata features introduced GeoArrow 0.2 specification, including non-PROJJSON CRS types spheroidal edge interpolations (#57, #65). geoarrow.wkb geoarrow.wkt extension types now support binary view string view storage types, respectively (#66). Internal versions geoarrow-c, nanoarrow, fast_float updated (#64).","code":""},{"path":"https://geoarrow.org/geoarrow-r/news/index.html","id":"geoarrow-021","dir":"Changelog","previous_headings":"","what":"geoarrow 0.2.1","title":"geoarrow 0.2.1","text":"CRAN release: 2024-06-13 Fix undefined behaviour identified UBSAN (#44).","code":""},{"path":"https://geoarrow.org/geoarrow-r/news/index.html","id":"geoarrow-020","dir":"Changelog","previous_headings":"","what":"geoarrow 0.2.0","title":"geoarrow 0.2.0","text":"CRAN release: 2024-05-31 Initial CRAN submission.","code":""}]
